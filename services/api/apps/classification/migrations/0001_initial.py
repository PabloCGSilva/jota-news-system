# Generated by Django 4.2.7 on 2025-07-09 18:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("news", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ClassificationModel",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("tfidf", "TF-IDF with SVM"),
                            ("nb", "Naive Bayes"),
                            ("lr", "Logistic Regression"),
                            ("ensemble", "Ensemble Model"),
                        ],
                        default="tfidf",
                        max_length=20,
                    ),
                ),
                (
                    "config",
                    models.JSONField(
                        default=dict, help_text="Model configuration parameters"
                    ),
                ),
                ("model_file_path", models.CharField(blank=True, max_length=255)),
                ("vectorizer_file_path", models.CharField(blank=True, max_length=255)),
                ("training_data_count", models.PositiveIntegerField(default=0)),
                ("last_trained", models.DateTimeField(blank=True, null=True)),
                ("training_accuracy", models.FloatField(blank=True, null=True)),
                ("validation_accuracy", models.FloatField(blank=True, null=True)),
                ("precision", models.FloatField(blank=True, null=True)),
                ("recall", models.FloatField(blank=True, null=True)),
                ("f1_score", models.FloatField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=False)),
                ("is_trained", models.BooleanField(default=False)),
                ("total_predictions", models.PositiveIntegerField(default=0)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Classification Model",
                "verbose_name_plural": "Classification Models",
                "db_table": "classification_model",
                "ordering": ["-is_active", "name"],
            },
        ),
        migrations.CreateModel(
            name="ClassificationStatistic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(unique=True)),
                ("total_classifications", models.PositiveIntegerField(default=0)),
                ("successful_classifications", models.PositiveIntegerField(default=0)),
                ("failed_classifications", models.PositiveIntegerField(default=0)),
                ("keyword_classifications", models.PositiveIntegerField(default=0)),
                ("ml_classifications", models.PositiveIntegerField(default=0)),
                ("hybrid_classifications", models.PositiveIntegerField(default=0)),
                ("manual_classifications", models.PositiveIntegerField(default=0)),
                ("avg_processing_time", models.FloatField(default=0.0)),
                ("avg_confidence_score", models.FloatField(default=0.0)),
                (
                    "category_breakdown",
                    models.JSONField(
                        default=dict, help_text="Number of classifications per category"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Classification Statistic",
                "verbose_name_plural": "Classification Statistics",
                "db_table": "classification_statistic",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="ClassificationTrainingData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("is_urgent", models.BooleanField(default=False)),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("manual", "Manual Labeling"),
                            ("verified", "Verified Classification"),
                            ("automatic", "Automatic Classification"),
                        ],
                        default="manual",
                        max_length=20,
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        default=1.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("is_validated", models.BooleanField(default=False)),
                ("used_in_training", models.BooleanField(default=False)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_data",
                        to="news.category",
                    ),
                ),
                (
                    "news",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_data",
                        to="news.news",
                    ),
                ),
                (
                    "subcategory",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="training_data",
                        to="news.subcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Classification Training Data",
                "verbose_name_plural": "Classification Training Data",
                "db_table": "classification_training_data",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ClassificationRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                (
                    "rule_type",
                    models.CharField(
                        choices=[
                            ("keyword", "Keyword Matching"),
                            ("pattern", "Pattern Matching"),
                            ("ml", "Machine Learning"),
                            ("hybrid", "Hybrid"),
                        ],
                        default="keyword",
                        max_length=20,
                    ),
                ),
                (
                    "keywords",
                    models.JSONField(
                        default=list, help_text="List of keywords to match"
                    ),
                ),
                (
                    "patterns",
                    models.JSONField(
                        default=list, help_text="List of regex patterns to match"
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        default=1.0,
                        help_text="Weight of this rule in classification",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(10.0),
                        ],
                    ),
                ),
                (
                    "confidence_threshold",
                    models.FloatField(
                        default=0.5,
                        help_text="Minimum confidence required for this rule to apply",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("requires_title_match", models.BooleanField(default=False)),
                ("requires_content_match", models.BooleanField(default=True)),
                ("case_sensitive", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "priority",
                    models.IntegerField(
                        default=100,
                        help_text="Priority for rule execution (lower = higher priority)",
                    ),
                ),
                ("total_matches", models.PositiveIntegerField(default=0)),
                ("successful_classifications", models.PositiveIntegerField(default=0)),
                ("last_used", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "target_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classification_rules",
                        to="news.category",
                    ),
                ),
                (
                    "target_subcategory",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classification_rules",
                        to="news.subcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Classification Rule",
                "verbose_name_plural": "Classification Rules",
                "db_table": "classification_rule",
                "ordering": ["priority", "name"],
            },
        ),
        migrations.CreateModel(
            name="ClassificationResult",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        choices=[
                            ("keyword", "Keyword Matching"),
                            ("ml", "Machine Learning"),
                            ("hybrid", "Hybrid"),
                            ("manual", "Manual"),
                        ],
                        default="keyword",
                        max_length=20,
                    ),
                ),
                (
                    "category_confidence",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ]
                    ),
                ),
                (
                    "subcategory_confidence",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "urgency_confidence",
                    models.FloatField(
                        default=0.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "prediction_details",
                    models.JSONField(
                        default=dict, help_text="Detailed prediction information"
                    ),
                ),
                ("is_accepted", models.BooleanField(default=False)),
                ("is_manual_override", models.BooleanField(default=False)),
                (
                    "processing_time",
                    models.FloatField(
                        help_text="Time taken for classification in seconds"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "applied_model",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="results",
                        to="classification.classificationmodel",
                    ),
                ),
                (
                    "applied_rule",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="results",
                        to="classification.classificationrule",
                    ),
                ),
                (
                    "news",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="classification_results",
                        to="news.news",
                    ),
                ),
                (
                    "predicted_category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predicted_results",
                        to="news.category",
                    ),
                ),
                (
                    "predicted_subcategory",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="predicted_results",
                        to="news.subcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Classification Result",
                "verbose_name_plural": "Classification Results",
                "db_table": "classification_result",
                "ordering": ["-created_at"],
            },
        ),
    ]

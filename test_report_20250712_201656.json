{
  "timestamp": "2025-07-12T20:16:24.585263",
  "tests": {
    "unit": {
      "status": "passed",
      "output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /usr/local/bin/python3.11\ncachedir: .pytest_cache\ndjango: version: 4.2.7\nrootdir: /app\nconfigfile: pytest.ini\nplugins: Faker-37.4.0, cov-4.1.0, django-4.7.0, anyio-4.9.0\ncollecting ... collected 37 items\n\ntests/unit/test_classification_models.py::TestClassificationRule::test_create_classification_rule PASSED [  2%]\ntests/unit/test_classification_models.py::TestClassificationRule::test_rule_increment_matches PASSED [  5%]\ntests/unit/test_classification_models.py::TestClassificationRule::test_rule_increment_successful_classifications PASSED [  8%]\ntests/unit/test_classification_models.py::TestClassificationRule::test_rule_success_rate_calculation PASSED [ 10%]\ntests/unit/test_classification_models.py::TestClassificationRule::test_rule_unique_name PASSED [ 13%]\ntests/unit/test_classification_models.py::TestClassificationModel::test_create_classification_model PASSED [ 16%]\ntests/unit/test_classification_models.py::TestClassificationModel::test_model_increment_predictions PASSED [ 18%]\ntests/unit/test_classification_models.py::TestClassificationResult::test_create_classification_result PASSED [ 21%]\ntests/unit/test_classification_models.py::TestClassificationResult::test_accept_classification PASSED [ 24%]\ntests/unit/test_classification_models.py::TestClassificationTrainingData::test_create_training_data PASSED [ 27%]\ntests/unit/test_classification_models.py::TestClassificationStatistic::test_create_classification_statistic PASSED [ 29%]\ntests/unit/test_classification_models.py::TestClassificationStatistic::test_statistic_success_rate_calculation PASSED [ 32%]\ntests/unit/test_news_models.py::TestCategoryModel::test_create_category PASSED [ 35%]\ntests/unit/test_news_models.py::TestCategoryModel::test_category_unique_name PASSED [ 37%]\ntests/unit/test_news_models.py::TestCategoryModel::test_category_unique_slug PASSED [ 40%]\ntests/unit/test_news_models.py::TestSubcategoryModel::test_create_subcategory PASSED [ 43%]\ntests/unit/test_news_models.py::TestSubcategoryModel::test_subcategory_category_slug_unique_together PASSED [ 45%]\ntests/unit/test_news_models.py::TestTagModel::test_create_tag PASSED     [ 48%]\ntests/unit/test_news_models.py::TestTagModel::test_tag_unique_name PASSED [ 51%]\ntests/unit/test_news_models.py::TestNewsModel::test_create_news PASSED   [ 54%]\ntests/unit/test_news_models.py::TestNewsModel::test_news_auto_word_count PASSED [ 56%]\ntests/unit/test_news_models.py::TestNewsModel::test_news_auto_reading_time PASSED [ 59%]\ntests/unit/test_news_models.py::TestNewsModel::test_news_auto_summary_generation PASSED [ 62%]\ntests/unit/test_news_models.py::TestNewsModel::test_news_increment_view_count PASSED [ 64%]\ntests/unit/test_news_models.py::TestNewsModel::test_news_increment_share_count PASSED [ 67%]\ntests/unit/test_news_models.py::TestNewsModel::test_news_external_id_unique PASSED [ 70%]\ntests/unit/test_news_models.py::TestNewsProcessingLog::test_create_processing_log PASSED [ 72%]\ntests/unit/test_news_serializers.py::TestCategorySerializer::test_serialize_category PASSED [ 75%]\ntests/unit/test_news_serializers.py::TestCategorySerializer::test_deserialize_category PASSED [ 78%]\ntests/unit/test_news_serializers.py::TestSubcategorySerializer::test_serialize_subcategory PASSED [ 81%]\ntests/unit/test_news_serializers.py::TestTagSerializer::test_serialize_tag PASSED [ 83%]\ntests/unit/test_news_serializers.py::TestNewsSerializers::test_news_list_serializer PASSED [ 86%]\ntests/unit/test_news_serializers.py::TestNewsSerializers::test_news_detail_serializer PASSED [ 89%]\ntests/unit/test_news_serializers.py::TestNewsSerializers::test_news_create_serializer PASSED [ 91%]\ntests/unit/test_news_serializers.py::TestNewsSerializers::test_news_update_serializer PASSED [ 94%]\ntests/unit/test_news_serializers.py::TestNewsSerializers::test_news_create_serializer_validation PASSED [ 97%]\ntests/unit/test_news_serializers.py::TestNewsSerializers::test_news_create_with_duplicate_external_id PASSED [100%]\n\n=============================== warnings summary ===============================\ntests/unit/test_classification_models.py:14\n  /app/tests/unit/test_classification_models.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_classification_models.py:80\n  /app/tests/unit/test_classification_models.py:80: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_classification_models.py:119\n  /app/tests/unit/test_classification_models.py:119: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_classification_models.py:172\n  /app/tests/unit/test_classification_models.py:172: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_classification_models.py:196\n  /app/tests/unit/test_classification_models.py:196: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_models.py:13\n  /app/tests/unit/test_news_models.py:13: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_models.py:53\n  /app/tests/unit/test_news_models.py:53: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_models.py:88\n  /app/tests/unit/test_news_models.py:88: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_models.py:114\n  /app/tests/unit/test_news_models.py:114: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_models.py:213\n  /app/tests/unit/test_news_models.py:213: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_serializers.py:15\n  /app/tests/unit/test_news_serializers.py:15: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_serializers.py:50\n  /app/tests/unit/test_news_serializers.py:50: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_serializers.py:65\n  /app/tests/unit/test_news_serializers.py:65: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\ntests/unit/test_news_serializers.py:79\n  /app/tests/unit/test_news_serializers.py:79: PytestUnknownMarkWarning: Unknown pytest.mark.unit - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.unit\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n\n---------- coverage: platform linux, python 3.11.13-final-0 ----------\nName                                                                           Stmts   Miss  Cover\n--------------------------------------------------------------------------------------------------\napps/__init__.py                                                                   0      0   100%\napps/authentication/__init__.py                                                    0      0   100%\napps/authentication/admin.py                                                      34      4    88%\napps/authentication/apps.py                                                       10      0   100%\napps/authentication/backends.py                                                   24     24     0%\napps/authentication/drf_authentication.py                                         38     38     0%\napps/authentication/migrations/0001_initial.py                                    11     11     0%\napps/authentication/migrations/__init__.py                                         0      0   100%\napps/authentication/models.py                                                     63      7    89%\napps/authentication/serializers.py                                                97     97     0%\napps/authentication/urls.py                                                       19     19     0%\napps/authentication/views.py                                                     104    104     0%\napps/classification/__init__.py                                                    0      0   100%\napps/classification/admin.py                                                     144     63    56%\napps/classification/apps.py                                                        7      0   100%\napps/classification/classifier.py                                                225    169    25%\napps/classification/management/__init__.py                                         0      0   100%\napps/classification/management/commands/__init__.py                                0      0   100%\napps/classification/management/commands/setup_nltk.py                             68     68     0%\napps/classification/migrations/0001_initial.py                                     8      8     0%\napps/classification/migrations/__init__.py                                         0      0   100%\napps/classification/models.py                                                    162      1    99%\napps/classification/serializers.py                                                87     87     0%\napps/classification/signals.py                                                    38      6    84%\napps/classification/tasks.py                                                     168    146    13%\napps/classification/urls.py                                                       12     12     0%\napps/classification/views.py                                                     168    168     0%\napps/demo/__init__.py                                                              0      0   100%\napps/demo/apps.py                                                                  5      0   100%\napps/demo/urls.py                                                                  4      4     0%\napps/demo/views.py                                                               167    167     0%\napps/news/__init__.py                                                              0      0   100%\napps/news/admin.py                                                                91     20    78%\napps/news/apps.py                                                                  7      0   100%\napps/news/filters.py                                                              62     62     0%\napps/news/management/__init__.py                                                   0      0   100%\napps/news/management/commands/__init__.py                                          0      0   100%\napps/news/management/commands/create_sample_data.py                               78     78     0%\napps/news/migrations/0001_initial.py                                              11     11     0%\napps/news/migrations/0002_remove_news_news_news_title_ad75b1_gin_and_more.py       5      5     0%\napps/news/migrations/0003_fix_external_id_constraint.py                            4      4     0%\napps/news/migrations/__init__.py                                                   0      0   100%\napps/news/models.py                                                              130      3    98%\napps/news/pagination.py                                                           15     15     0%\napps/news/serializers.py                                                          92      0   100%\napps/news/signals.py                                                              39      3    92%\napps/news/tasks.py                                                                93     93     0%\napps/news/urls.py                                                                 12     12     0%\napps/news/views.py                                                               149    149     0%\napps/notifications/__init__.py                                                     0      0   100%\napps/notifications/admin.py                                                      141     56    60%\napps/notifications/apps.py                                                         7      0   100%\napps/notifications/migrations/0001_initial.py                                      9      9     0%\napps/notifications/migrations/__init__.py                                          0      0   100%\napps/notifications/models.py                                                     202     64    68%\napps/notifications/providers.py                                                   97     67    31%\napps/notifications/serializers.py                                                129    129     0%\napps/notifications/signals.py                                                     37     25    32%\napps/notifications/tasks.py                                                      194    171    12%\napps/notifications/urls.py                                                        12     12     0%\napps/notifications/views.py                                                      211    211     0%\napps/webhooks/__init__.py                                                          0      0   100%\napps/webhooks/admin.py                                                           105     40    62%\napps/webhooks/apps.py                                                              7      0   100%\napps/webhooks/migrations/0001_initial.py                                           7      7     0%\napps/webhooks/migrations/__init__.py                                               0      0   100%\napps/webhooks/models.py                                                          124     30    76%\napps/webhooks/serializers.py                                                      81     81     0%\napps/webhooks/signals.py                                                          28     18    36%\napps/webhooks/tasks.py                                                           151    151     0%\napps/webhooks/urls.py                                                              9      9     0%\napps/webhooks/utils.py                                                           121    121     0%\napps/webhooks/views.py                                                           123    123     0%\n--------------------------------------------------------------------------------------------------\nTOTAL                                                                           4246   2982    30%\nCoverage JSON written to file coverage.json\n\n======================= 37 passed, 14 warnings in 10.48s =======================\n"
    },
    "integration": {
      "status": "failed",
      "error": "time=\"2025-07-12T20:16:43-03:00\" level=warning msg=\"/mnt/c/Users/pablo/JOTA/jota-news-system/docker-compose.yml: `version` is obsolete\"\n",
      "output": "============================= test session starts ==============================\nplatform linux -- Python 3.11.13, pytest-7.4.3, pluggy-1.6.0 -- /usr/local/bin/python3.11\ncachedir: .pytest_cache\ndjango: version: 4.2.7\nrootdir: /app\nconfigfile: pytest.ini\nplugins: Faker-37.4.0, cov-4.1.0, django-4.7.0, anyio-4.9.0\ncollecting ... collected 32 items\n\ntests/integration/test_news_api.py::TestNewsAPI::test_list_news_authenticated PASSED [  3%]\ntests/integration/test_news_api.py::TestNewsAPI::test_list_news_unauthenticated PASSED [  6%]\ntests/integration/test_news_api.py::TestNewsAPI::test_retrieve_news PASSED [  9%]\ntests/integration/test_news_api.py::TestNewsAPI::test_create_news PASSED [ 12%]\ntests/integration/test_news_api.py::TestNewsAPI::test_update_news PASSED [ 15%]\ntests/integration/test_news_api.py::TestNewsAPI::test_filter_news_by_category PASSED [ 18%]\ntests/integration/test_news_api.py::TestNewsAPI::test_search_news PASSED [ 21%]\ntests/integration/test_news_api.py::TestNewsAPI::test_mark_news_urgent PASSED [ 25%]\ntests/integration/test_news_api.py::TestNewsAPI::test_share_news PASSED  [ 28%]\ntests/integration/test_news_api.py::TestNewsAPI::test_get_related_news PASSED [ 31%]\ntests/integration/test_news_api.py::TestNewsAPI::test_advanced_search PASSED [ 34%]\ntests/integration/test_news_api.py::TestCategoryAPI::test_list_categories PASSED [ 37%]\ntests/integration/test_news_api.py::TestCategoryAPI::test_create_category PASSED [ 40%]\ntests/integration/test_news_api.py::TestCategoryAPI::test_category_statistics PASSED [ 43%]\ntests/integration/test_news_api.py::TestTagAPI::test_list_tags PASSED    [ 46%]\ntests/integration/test_news_api.py::TestTagAPI::test_create_tag PASSED   [ 50%]\ntests/integration/test_news_api.py::TestNewsPermissions::test_unauthenticated_read_access_allowed PASSED [ 53%]\ntests/integration/test_news_api.py::TestNewsPermissions::test_read_only_access_for_regular_users PASSED [ 56%]\ntests/integration/test_webhook_integration.py::TestWebhookEndpoints::test_webhook_source_crud PASSED [ 59%]\ntests/integration/test_webhook_integration.py::TestWebhookEndpoints::test_webhook_statistics PASSED [ 62%]\ntests/integration/test_webhook_integration.py::TestWebhookEndpoints::test_webhook_test_endpoint PASSED [ 65%]\ntests/integration/test_webhook_integration.py::TestNewsWebhookReceiver::test_receive_valid_webhook PASSED [ 68%]\ntests/integration/test_webhook_integration.py::TestNewsWebhookReceiver::test_receive_webhook_invalid_source PASSED [ 71%]\ntests/integration/test_webhook_integration.py::TestNewsWebhookReceiver::test_receive_webhook_invalid_json PASSED [ 75%]\ntests/integration/test_webhook_integration.py::TestNewsWebhookReceiver::test_receive_webhook_missing_required_fields PASSED [ 78%]\ntests/integration/test_webhook_integration.py::TestNewsWebhookReceiver::test_webhook_signature_verification PASSED [ 81%]\ntests/integration/test_webhook_integration.py::TestWhatsAppWebhook::test_whatsapp_webhook_verification FAILED [ 84%]\ntests/integration/test_webhook_integration.py::TestWhatsAppWebhook::test_whatsapp_webhook_verification_invalid_token FAILED [ 87%]\ntests/integration/test_webhook_integration.py::TestWhatsAppWebhook::test_whatsapp_webhook_message_receive FAILED [ 90%]\ntests/integration/test_webhook_integration.py::TestWebhookDashboard::test_webhook_dashboard PASSED [ 93%]\ntests/integration/test_webhook_integration.py::TestWebhookProcessing::test_webhook_processing_task_triggered PASSED [ 96%]\ntests/integration/test_webhook_integration.py::TestWebhookProcessing::test_webhook_log_creation PASSED [100%]\n\n=================================== FAILURES ===================================\n____________ TestWhatsAppWebhook.test_whatsapp_webhook_verification ____________\n\nself = <tests.integration.test_webhook_integration.TestWhatsAppWebhook object at 0x754fae330b50>\napi_client = <rest_framework.test.APIClient object at 0x754fac7e6810>\n\n    def test_whatsapp_webhook_verification(self, api_client):\n        \"\"\"Test WhatsApp webhook verification.\"\"\"\n>       url = reverse('webhooks:whatsapp_webhook')\n\ntests/integration/test_webhook_integration.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/django/urls/base.py:88: in reverse\n    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <URLResolver <URLResolver list> (None:None) '^/'>\nlookup_view = 'whatsapp_webhook', _prefix = '/', args = (), kwargs = {}\npossibilities = []\n\n    def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n        if args and kwargs:\n            raise ValueError(\"Don't mix *args and **kwargs in call to reverse()!\")\n    \n        if not self._populated:\n            self._populate()\n    \n        possibilities = self.reverse_dict.getlist(lookup_view)\n    \n        for possibility, pattern, defaults, converters in possibilities:\n            for result, params in possibility:\n                if args:\n                    if len(args) != len(params):\n                        continue\n                    candidate_subs = dict(zip(params, args))\n                else:\n                    if set(kwargs).symmetric_difference(params).difference(defaults):\n                        continue\n                    matches = True\n                    for k, v in defaults.items():\n                        if k in params:\n                            continue\n                        if kwargs.get(k, v) != v:\n                            matches = False\n                            break\n                    if not matches:\n                        continue\n                    candidate_subs = kwargs\n                # Convert the candidate subs to text using Converter.to_url().\n                text_candidate_subs = {}\n                match = True\n                for k, v in candidate_subs.items():\n                    if k in converters:\n                        try:\n                            text_candidate_subs[k] = converters[k].to_url(v)\n                        except ValueError:\n                            match = False\n                            break\n                    else:\n                        text_candidate_subs[k] = str(v)\n                if not match:\n                    continue\n                # WSGI provides decoded URLs, without %xx escapes, and the URL\n                # resolver operates on such URLs. First substitute arguments\n                # without quoting to build a decoded URL and look for a match.\n                # Then, if we have a match, redo the substitution with quoted\n                # arguments in order to return a properly encoded URL.\n                candidate_pat = _prefix.replace(\"%\", \"%%\") + result\n                if re.search(\n                    \"^%s%s\" % (re.escape(_prefix), pattern),\n                    candidate_pat % text_candidate_subs,\n                ):\n                    # safe characters from `pchar` definition of RFC 3986\n                    url = quote(\n                        candidate_pat % text_candidate_subs,\n                        safe=RFC3986_SUBDELIMS + \"/~:@\",\n                    )\n                    # Don't allow construction of scheme relative urls.\n                    return escape_leading_slashes(url)\n        # lookup_view can be URL name or callable, but callables are not\n        # friendly in error messages.\n        m = getattr(lookup_view, \"__module__\", None)\n        n = getattr(lookup_view, \"__name__\", None)\n        if m is not None and n is not None:\n            lookup_view_s = \"%s.%s\" % (m, n)\n        else:\n            lookup_view_s = lookup_view\n    \n        patterns = [pattern for (_, pattern, _, _) in possibilities]\n        if patterns:\n            if args:\n                arg_msg = \"arguments '%s'\" % (args,)\n            elif kwargs:\n                arg_msg = \"keyword arguments '%s'\" % kwargs\n            else:\n                arg_msg = \"no arguments\"\n            msg = \"Reverse for '%s' with %s not found. %d pattern(s) tried: %s\" % (\n                lookup_view_s,\n                arg_msg,\n                len(patterns),\n                patterns,\n            )\n        else:\n            msg = (\n                \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                \"a valid view function or pattern name.\" % {\"view\": lookup_view_s}\n            )\n>       raise NoReverseMatch(msg)\nE       django.urls.exceptions.NoReverseMatch: Reverse for 'whatsapp_webhook' not found. 'whatsapp_webhook' is not a valid view function or pattern name.\n\n/usr/local/lib/python3.11/site-packages/django/urls/resolvers.py:828: NoReverseMatch\n_____ TestWhatsAppWebhook.test_whatsapp_webhook_verification_invalid_token _____\n\nself = <tests.integration.test_webhook_integration.TestWhatsAppWebhook object at 0x754fae3303d0>\napi_client = <rest_framework.test.APIClient object at 0x754fac8cac10>\n\n    def test_whatsapp_webhook_verification_invalid_token(self, api_client):\n        \"\"\"Test WhatsApp webhook verification with invalid token.\"\"\"\n>       url = reverse('webhooks:whatsapp_webhook')\n\ntests/integration/test_webhook_integration.py:191: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/django/urls/base.py:88: in reverse\n    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <URLResolver <URLResolver list> (None:None) '^/'>\nlookup_view = 'whatsapp_webhook', _prefix = '/', args = (), kwargs = {}\npossibilities = []\n\n    def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n        if args and kwargs:\n            raise ValueError(\"Don't mix *args and **kwargs in call to reverse()!\")\n    \n        if not self._populated:\n            self._populate()\n    \n        possibilities = self.reverse_dict.getlist(lookup_view)\n    \n        for possibility, pattern, defaults, converters in possibilities:\n            for result, params in possibility:\n                if args:\n                    if len(args) != len(params):\n                        continue\n                    candidate_subs = dict(zip(params, args))\n                else:\n                    if set(kwargs).symmetric_difference(params).difference(defaults):\n                        continue\n                    matches = True\n                    for k, v in defaults.items():\n                        if k in params:\n                            continue\n                        if kwargs.get(k, v) != v:\n                            matches = False\n                            break\n                    if not matches:\n                        continue\n                    candidate_subs = kwargs\n                # Convert the candidate subs to text using Converter.to_url().\n                text_candidate_subs = {}\n                match = True\n                for k, v in candidate_subs.items():\n                    if k in converters:\n                        try:\n                            text_candidate_subs[k] = converters[k].to_url(v)\n                        except ValueError:\n                            match = False\n                            break\n                    else:\n                        text_candidate_subs[k] = str(v)\n                if not match:\n                    continue\n                # WSGI provides decoded URLs, without %xx escapes, and the URL\n                # resolver operates on such URLs. First substitute arguments\n                # without quoting to build a decoded URL and look for a match.\n                # Then, if we have a match, redo the substitution with quoted\n                # arguments in order to return a properly encoded URL.\n                candidate_pat = _prefix.replace(\"%\", \"%%\") + result\n                if re.search(\n                    \"^%s%s\" % (re.escape(_prefix), pattern),\n                    candidate_pat % text_candidate_subs,\n                ):\n                    # safe characters from `pchar` definition of RFC 3986\n                    url = quote(\n                        candidate_pat % text_candidate_subs,\n                        safe=RFC3986_SUBDELIMS + \"/~:@\",\n                    )\n                    # Don't allow construction of scheme relative urls.\n                    return escape_leading_slashes(url)\n        # lookup_view can be URL name or callable, but callables are not\n        # friendly in error messages.\n        m = getattr(lookup_view, \"__module__\", None)\n        n = getattr(lookup_view, \"__name__\", None)\n        if m is not None and n is not None:\n            lookup_view_s = \"%s.%s\" % (m, n)\n        else:\n            lookup_view_s = lookup_view\n    \n        patterns = [pattern for (_, pattern, _, _) in possibilities]\n        if patterns:\n            if args:\n                arg_msg = \"arguments '%s'\" % (args,)\n            elif kwargs:\n                arg_msg = \"keyword arguments '%s'\" % kwargs\n            else:\n                arg_msg = \"no arguments\"\n            msg = \"Reverse for '%s' with %s not found. %d pattern(s) tried: %s\" % (\n                lookup_view_s,\n                arg_msg,\n                len(patterns),\n                patterns,\n            )\n        else:\n            msg = (\n                \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                \"a valid view function or pattern name.\" % {\"view\": lookup_view_s}\n            )\n>       raise NoReverseMatch(msg)\nE       django.urls.exceptions.NoReverseMatch: Reverse for 'whatsapp_webhook' not found. 'whatsapp_webhook' is not a valid view function or pattern name.\n\n/usr/local/lib/python3.11/site-packages/django/urls/resolvers.py:828: NoReverseMatch\n__________ TestWhatsAppWebhook.test_whatsapp_webhook_message_receive ___________\n\nself = <tests.integration.test_webhook_integration.TestWhatsAppWebhook object at 0x754fae330490>\napi_client = <rest_framework.test.APIClient object at 0x754fac672190>\n\n    def test_whatsapp_webhook_message_receive(self, api_client):\n        \"\"\"Test receiving WhatsApp messages.\"\"\"\n>       url = reverse('webhooks:whatsapp_webhook')\n\ntests/integration/test_webhook_integration.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.11/site-packages/django/urls/base.py:88: in reverse\n    return resolver._reverse_with_prefix(view, prefix, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <URLResolver <URLResolver list> (None:None) '^/'>\nlookup_view = 'whatsapp_webhook', _prefix = '/', args = (), kwargs = {}\npossibilities = []\n\n    def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n        if args and kwargs:\n            raise ValueError(\"Don't mix *args and **kwargs in call to reverse()!\")\n    \n        if not self._populated:\n            self._populate()\n    \n        possibilities = self.reverse_dict.getlist(lookup_view)\n    \n        for possibility, pattern, defaults, converters in possibilities:\n            for result, params in possibility:\n                if args:\n                    if len(args) != len(params):\n                        continue\n                    candidate_subs = dict(zip(params, args))\n                else:\n                    if set(kwargs).symmetric_difference(params).difference(defaults):\n                        continue\n                    matches = True\n                    for k, v in defaults.items():\n                        if k in params:\n                            continue\n                        if kwargs.get(k, v) != v:\n                            matches = False\n                            break\n                    if not matches:\n                        continue\n                    candidate_subs = kwargs\n                # Convert the candidate subs to text using Converter.to_url().\n                text_candidate_subs = {}\n                match = True\n                for k, v in candidate_subs.items():\n                    if k in converters:\n                        try:\n                            text_candidate_subs[k] = converters[k].to_url(v)\n                        except ValueError:\n                            match = False\n                            break\n                    else:\n                        text_candidate_subs[k] = str(v)\n                if not match:\n                    continue\n                # WSGI provides decoded URLs, without %xx escapes, and the URL\n                # resolver operates on such URLs. First substitute arguments\n                # without quoting to build a decoded URL and look for a match.\n                # Then, if we have a match, redo the substitution with quoted\n                # arguments in order to return a properly encoded URL.\n                candidate_pat = _prefix.replace(\"%\", \"%%\") + result\n                if re.search(\n                    \"^%s%s\" % (re.escape(_prefix), pattern),\n                    candidate_pat % text_candidate_subs,\n                ):\n                    # safe characters from `pchar` definition of RFC 3986\n                    url = quote(\n                        candidate_pat % text_candidate_subs,\n                        safe=RFC3986_SUBDELIMS + \"/~:@\",\n                    )\n                    # Don't allow construction of scheme relative urls.\n                    return escape_leading_slashes(url)\n        # lookup_view can be URL name or callable, but callables are not\n        # friendly in error messages.\n        m = getattr(lookup_view, \"__module__\", None)\n        n = getattr(lookup_view, \"__name__\", None)\n        if m is not None and n is not None:\n            lookup_view_s = \"%s.%s\" % (m, n)\n        else:\n            lookup_view_s = lookup_view\n    \n        patterns = [pattern for (_, pattern, _, _) in possibilities]\n        if patterns:\n            if args:\n                arg_msg = \"arguments '%s'\" % (args,)\n            elif kwargs:\n                arg_msg = \"keyword arguments '%s'\" % kwargs\n            else:\n                arg_msg = \"no arguments\"\n            msg = \"Reverse for '%s' with %s not found. %d pattern(s) tried: %s\" % (\n                lookup_view_s,\n                arg_msg,\n                len(patterns),\n                patterns,\n            )\n        else:\n            msg = (\n                \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                \"a valid view function or pattern name.\" % {\"view\": lookup_view_s}\n            )\n>       raise NoReverseMatch(msg)\nE       django.urls.exceptions.NoReverseMatch: Reverse for 'whatsapp_webhook' not found. 'whatsapp_webhook' is not a valid view function or pattern name.\n\n/usr/local/lib/python3.11/site-packages/django/urls/resolvers.py:828: NoReverseMatch\n=============================== warnings summary ===============================\ntests/integration/test_news_api.py:9\n  /app/tests/integration/test_news_api.py:9: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_news_api.py:152\n  /app/tests/integration/test_news_api.py:152: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_news_api.py:196\n  /app/tests/integration/test_news_api.py:196: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_news_api.py:223\n  /app/tests/integration/test_news_api.py:223: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_webhook_integration.py:14\n  /app/tests/integration/test_webhook_integration.py:14: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_webhook_integration.py:72\n  /app/tests/integration/test_webhook_integration.py:72: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_webhook_integration.py:169\n  /app/tests/integration/test_webhook_integration.py:169: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_webhook_integration.py:241\n  /app/tests/integration/test_webhook_integration.py:241: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\ntests/integration/test_webhook_integration.py:261\n  /app/tests/integration/test_webhook_integration.py:261: PytestUnknownMarkWarning: Unknown pytest.mark.integration - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html\n    @pytest.mark.integration\n\n-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html\n=========================== short test summary info ============================\nFAILED tests/integration/test_webhook_integration.py::TestWhatsAppWebhook::test_whatsapp_webhook_verification\nFAILED tests/integration/test_webhook_integration.py::TestWhatsAppWebhook::test_whatsapp_webhook_verification_invalid_token\nFAILED tests/integration/test_webhook_integration.py::TestWhatsAppWebhook::test_whatsapp_webhook_message_receive\n=================== 3 failed, 29 passed, 9 warnings in 7.02s ===================\n"
    },
    "api__api_v1_news_categories_": {
      "status": "passed",
      "response_code": 200
    },
    "api__api_v1_news_tags_": {
      "status": "passed",
      "response_code": 200
    },
    "api__api_v1_news_articles_": {
      "status": "passed",
      "response_code": 200
    },
    "api__api_docs_": {
      "status": "passed",
      "response_code": 200
    },
    "api__metrics": {
      "status": "passed",
      "response_code": 200
    },
    "api__celery_metrics_": {
      "status": "passed",
      "response_code": 200
    },
    "api__business_metrics_": {
      "status": "passed",
      "response_code": 200
    },
    "api__security_metrics_": {
      "status": "passed",
      "response_code": 200
    }
  },
  "demos": {},
  "performance": {},
  "health_checks": {},
  "monitoring": {},
  "summary": {
    "total_tests": 10,
    "passed_tests": 9,
    "failed_tests": 1,
    "success_rate": 90.0,
    "execution_time": "2025-07-12T20:16:56.864895"
  }
}